{"ast":null,"code":"var _jsxFileName = \"/Users/kamil/WebstormProjects/you-can-do/src/Components/Dictionarypage/Dictionary/Dictionary.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import './Dictionary.css'; // Подключение файла стилей\n//\n// function Dictionary() {\n//     const [word, setWord] = useState('');\n//     const [definition, setDefinition] = useState(null);\n//     const [error, setError] = useState('');\n//\n//     const fetchDefinition = async () => {\n//         try {\n//             const response = await axios.get(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);\n//             setDefinition(response.data);\n//             setError('');\n//         } catch (err) {\n//             setDefinition(null);\n//             setError('Word not found. Please try again.');\n//         }\n//     };\n//\n//     return (\n//         <div className=\"dictionary-container\">\n//             <h1 className=\"dictionary-heading\">Dictionary</h1>\n//             <div className=\"search-container\">\n//                 <input\n//                     type=\"text\"\n//                     placeholder=\"Enter a word\"\n//                     value={word}\n//                     onChange={(e) => setWord(e.target.value)}\n//                     className=\"search-input\"\n//                 />\n//                 <button onClick={fetchDefinition} className=\"search-button\">Search</button>\n//             </div>\n//\n//             {error && <p className=\"error-message\">{error}</p>}\n//\n//             {definition && (\n//                 <div className=\"definitions\">\n//                     {definition.map((item, index) => (\n//                         <div key={index} className=\"word-definition\">\n//                             <h2 className=\"word\">{item.word}</h2>\n//                             {item.phonetics && (\n//                                 <div className=\"phonetics\">\n//                                     <p>Phonetic: {item.phonetic}</p>\n//                                     {item.phonetics.map((phonetic, index) => (\n//                                         <div key={index} className=\"phonetic-text\">\n//                                             <p>{phonetic.text}</p>\n//                                         </div>\n//                                     ))}\n//                                 </div>\n//                             )}\n//                             {item.meanings.map((meaning, index) => (\n//                                 <div key={index} className=\"part-of-speech\">\n//                                     <h3>{meaning.partOfSpeech}</h3>\n//                                     {meaning.definitions.map((def, index) => (\n//                                         <div key={index} className=\"definition\">\n//                                             <p>Definition: {def.definition}</p>\n//                                             {def.example && <p>Example: {def.example}</p>}\n//                                         </div>\n//                                     ))}\n//                                 </div>\n//                             ))}\n//                         </div>\n//                     ))}\n//                 </div>\n//             )}\n//         </div>\n//     );\n// }\n//\n//\n//\n//\n// export default Dictionary;\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import './Dictionary.css'; // Подключение файла стилей\n//\n// function Dictionary() {\n//     const [word, setWord] = useState('');\n//     const [definition, setDefinition] = useState(null);\n//     const [error, setError] = useState('');\n//\n//     const fetchDefinition = async () => {\n//         try {\n//             const response = await axios.get(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);\n//             setDefinition(response.data);\n//             setError('');\n//         } catch (err) {\n//             setDefinition(null);\n//             setError('Word not found. Please try again.');\n//         }\n//     };\n//\n//     return (\n//         <div className=\"dictionary-container\">\n//             <h1 className=\"dictionary-heading\">Dictionary</h1>\n//             <div className=\"search-container\">\n//                 <input\n//                     type=\"text\"\n//                     placeholder=\"Enter a word\"\n//                     value={word}\n//                     onChange={(e) => setWord(e.target.value)}\n//                     className=\"search-input\"\n//                 />\n//                 <button onClick={fetchDefinition} className=\"search-button\">Search</button>\n//             </div>\n//\n//             {error && <p className=\"error-message\">{error}</p>}\n//\n//             {definition && (\n//                 <div className=\"definitions\">\n//                     {definition.map((item, index) => (\n//                         <div key={index} className=\"word-definition\">\n//                             <h2 className=\"word\">{item.word}</h2>\n//                             {item.phonetics && (\n//                                 <div className=\"phonetics\">\n//                                     <p>Phonetic: {item.phonetic}</p>\n//                                     {item.phonetics.map((phonetic, index) => (\n//                                         <div key={index} className=\"phonetic-text\">\n//                                             <p>{phonetic.text}</p>\n//                                         </div>\n//                                     ))}\n//                                 </div>\n//                             )}\n//                             {item.meanings.map((meaning, index) => (\n//                                 <div key={index} className=\"part-of-speech\">\n//                                     <h3>{meaning.partOfSpeech}</h3>\n//                                     {meaning.definitions.map((def, index) => (\n//                                         <div key={index} className=\"definition\">\n//                                             <p>Definition: {def.definition}</p>\n//                                             {def.example && <p>Example: {def.example}</p>}\n//                                         </div>\n//                                     ))}\n//                                 </div>\n//                             ))}\n//                         </div>\n//                     ))}\n//                 </div>\n//\n//             )}\n//\n//         </div>\n//\n//     );\n// }\n//\n// export default Dictionary;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Dictionary.css'; // Подключение файла стилей\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dictionary() {\n  _s();\n  const [word, setWord] = useState('');\n  const [definition, setDefinition] = useState(null);\n  const [error, setError] = useState('');\n  const [savedWords, setSavedWords] = useState([]);\n  useEffect(() => {\n    const savedWordsFromStorage = localStorage.getItem('savedWords');\n    if (savedWordsFromStorage) {\n      setSavedWords(JSON.parse(savedWordsFromStorage));\n    }\n  }, []);\n  const fetchDefinition = async () => {\n    try {\n      const response = await axios.get(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);\n      setDefinition(response.data);\n      setError('');\n    } catch (err) {\n      setDefinition(null);\n      setError('Word not found. Please try again.');\n    }\n  };\n  const saveWord = () => {\n    if (word && definition) {\n      const newSavedWords = [...savedWords, {\n        word,\n        definition\n      }];\n      setSavedWords(newSavedWords);\n      localStorage.setItem('savedWords', JSON.stringify(newSavedWords));\n      setWord('');\n      setDefinition(null);\n    }\n  };\n  const deleteWord = index => {\n    const updatedSavedWords = savedWords.filter((_, i) => i !== index);\n    setSavedWords(updatedSavedWords);\n    localStorage.setItem('savedWords', JSON.stringify(updatedSavedWords));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dictionary-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"dictionary-heading\",\n      children: \"Dictionary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter a word\",\n        value: word,\n        onChange: e => setWord(e.target.value),\n        className: \"search-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchDefinition,\n        className: \"search-button\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 23\n    }, this), definition && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"definitions\",\n      children: definition.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-definition\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"word\",\n          children: item.word\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 29\n        }, this), item.phonetics && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"phonetics\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Phonetic: \", item.phonetic]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 37\n          }, this), item.phonetics.map((phonetic, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"phonetic-text\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: phonetic.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 45\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 41\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 33\n        }, this), item.meanings.map((meaning, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"part-of-speech\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: meaning.partOfSpeech\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 37\n          }, this), meaning.definitions.map((def, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"definition\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Definition: \", def.definition]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 45\n            }, this), def.example && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Example: \", def.example]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 61\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 41\n          }, this))]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 33\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveWord,\n        disabled: !word || !definition,\n        children: \"Save Word\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"saved-words\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Saved Words\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: savedWords.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: item.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => deleteWord(index),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 9\n  }, this);\n}\n_s(Dictionary, \"teQ7zLR3R79tLeojnsyIHFY0J3I=\");\n_c = Dictionary;\nexport default Dictionary;\nvar _c;\n$RefreshReg$(_c, \"Dictionary\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Dictionary","_s","word","setWord","definition","setDefinition","error","setError","savedWords","setSavedWords","savedWordsFromStorage","localStorage","getItem","JSON","parse","fetchDefinition","response","get","data","err","saveWord","newSavedWords","setItem","stringify","deleteWord","index","updatedSavedWords","filter","_","i","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","item","phonetics","phonetic","text","meanings","meaning","partOfSpeech","definitions","def","example","disabled","_c","$RefreshReg$"],"sources":["/Users/kamil/WebstormProjects/you-can-do/src/Components/Dictionarypage/Dictionary/Dictionary.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import axios from 'axios';\n// import './Dictionary.css'; // Подключение файла стилей\n//\n// function Dictionary() {\n//     const [word, setWord] = useState('');\n//     const [definition, setDefinition] = useState(null);\n//     const [error, setError] = useState('');\n//\n//     const fetchDefinition = async () => {\n//         try {\n//             const response = await axios.get(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);\n//             setDefinition(response.data);\n//             setError('');\n//         } catch (err) {\n//             setDefinition(null);\n//             setError('Word not found. Please try again.');\n//         }\n//     };\n//\n//     return (\n//         <div className=\"dictionary-container\">\n//             <h1 className=\"dictionary-heading\">Dictionary</h1>\n//             <div className=\"search-container\">\n//                 <input\n//                     type=\"text\"\n//                     placeholder=\"Enter a word\"\n//                     value={word}\n//                     onChange={(e) => setWord(e.target.value)}\n//                     className=\"search-input\"\n//                 />\n//                 <button onClick={fetchDefinition} className=\"search-button\">Search</button>\n//             </div>\n//\n//             {error && <p className=\"error-message\">{error}</p>}\n//\n//             {definition && (\n//                 <div className=\"definitions\">\n//                     {definition.map((item, index) => (\n//                         <div key={index} className=\"word-definition\">\n//                             <h2 className=\"word\">{item.word}</h2>\n//                             {item.phonetics && (\n//                                 <div className=\"phonetics\">\n//                                     <p>Phonetic: {item.phonetic}</p>\n//                                     {item.phonetics.map((phonetic, index) => (\n//                                         <div key={index} className=\"phonetic-text\">\n//                                             <p>{phonetic.text}</p>\n//                                         </div>\n//                                     ))}\n//                                 </div>\n//                             )}\n//                             {item.meanings.map((meaning, index) => (\n//                                 <div key={index} className=\"part-of-speech\">\n//                                     <h3>{meaning.partOfSpeech}</h3>\n//                                     {meaning.definitions.map((def, index) => (\n//                                         <div key={index} className=\"definition\">\n//                                             <p>Definition: {def.definition}</p>\n//                                             {def.example && <p>Example: {def.example}</p>}\n//                                         </div>\n//                                     ))}\n//                                 </div>\n//                             ))}\n//                         </div>\n//                     ))}\n//                 </div>\n//             )}\n//         </div>\n//     );\n// }\n//\n//\n//\n//\n// export default Dictionary;\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import './Dictionary.css'; // Подключение файла стилей\n//\n// function Dictionary() {\n//     const [word, setWord] = useState('');\n//     const [definition, setDefinition] = useState(null);\n//     const [error, setError] = useState('');\n//\n//     const fetchDefinition = async () => {\n//         try {\n//             const response = await axios.get(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);\n//             setDefinition(response.data);\n//             setError('');\n//         } catch (err) {\n//             setDefinition(null);\n//             setError('Word not found. Please try again.');\n//         }\n//     };\n//\n//     return (\n//         <div className=\"dictionary-container\">\n//             <h1 className=\"dictionary-heading\">Dictionary</h1>\n//             <div className=\"search-container\">\n//                 <input\n//                     type=\"text\"\n//                     placeholder=\"Enter a word\"\n//                     value={word}\n//                     onChange={(e) => setWord(e.target.value)}\n//                     className=\"search-input\"\n//                 />\n//                 <button onClick={fetchDefinition} className=\"search-button\">Search</button>\n//             </div>\n//\n//             {error && <p className=\"error-message\">{error}</p>}\n//\n//             {definition && (\n//                 <div className=\"definitions\">\n//                     {definition.map((item, index) => (\n//                         <div key={index} className=\"word-definition\">\n//                             <h2 className=\"word\">{item.word}</h2>\n//                             {item.phonetics && (\n//                                 <div className=\"phonetics\">\n//                                     <p>Phonetic: {item.phonetic}</p>\n//                                     {item.phonetics.map((phonetic, index) => (\n//                                         <div key={index} className=\"phonetic-text\">\n//                                             <p>{phonetic.text}</p>\n//                                         </div>\n//                                     ))}\n//                                 </div>\n//                             )}\n//                             {item.meanings.map((meaning, index) => (\n//                                 <div key={index} className=\"part-of-speech\">\n//                                     <h3>{meaning.partOfSpeech}</h3>\n//                                     {meaning.definitions.map((def, index) => (\n//                                         <div key={index} className=\"definition\">\n//                                             <p>Definition: {def.definition}</p>\n//                                             {def.example && <p>Example: {def.example}</p>}\n//                                         </div>\n//                                     ))}\n//                                 </div>\n//                             ))}\n//                         </div>\n//                     ))}\n//                 </div>\n//\n//             )}\n//\n//         </div>\n//\n//     );\n// }\n//\n// export default Dictionary;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Dictionary.css'; // Подключение файла стилей\n\nfunction Dictionary() {\n    const [word, setWord] = useState('');\n    const [definition, setDefinition] = useState(null);\n    const [error, setError] = useState('');\n    const [savedWords, setSavedWords] = useState([]);\n\n    useEffect(() => {\n        const savedWordsFromStorage = localStorage.getItem('savedWords');\n        if (savedWordsFromStorage) {\n            setSavedWords(JSON.parse(savedWordsFromStorage));\n        }\n    }, []);\n\n    const fetchDefinition = async () => {\n        try {\n            const response = await axios.get(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);\n            setDefinition(response.data);\n            setError('');\n        } catch (err) {\n            setDefinition(null);\n            setError('Word not found. Please try again.');\n        }\n    };\n\n    const saveWord = () => {\n        if (word && definition) {\n            const newSavedWords = [...savedWords, { word, definition }];\n            setSavedWords(newSavedWords);\n            localStorage.setItem('savedWords', JSON.stringify(newSavedWords));\n            setWord('');\n            setDefinition(null);\n        }\n    };\n\n    const deleteWord = (index) => {\n        const updatedSavedWords = savedWords.filter((_, i) => i !== index);\n        setSavedWords(updatedSavedWords);\n        localStorage.setItem('savedWords', JSON.stringify(updatedSavedWords));\n    };\n\n    return (\n        <div className=\"dictionary-container\">\n            <h1 className=\"dictionary-heading\">Dictionary</h1>\n            <div className=\"search-container\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter a word\"\n                    value={word}\n                    onChange={(e) => setWord(e.target.value)}\n                    className=\"search-input\"\n                />\n                <button onClick={fetchDefinition} className=\"search-button\">Search</button>\n            </div>\n\n            {error && <p className=\"error-message\">{error}</p>}\n\n            {definition && (\n                <div className=\"definitions\">\n                    {definition.map((item, index) => (\n                        <div key={index} className=\"word-definition\">\n                            <h2 className=\"word\">{item.word}</h2>\n                            {item.phonetics && (\n                                <div className=\"phonetics\">\n                                    <p>Phonetic: {item.phonetic}</p>\n                                    {item.phonetics.map((phonetic, index) => (\n                                        <div key={index} className=\"phonetic-text\">\n                                            <p>{phonetic.text}</p>\n                                        </div>\n                                    ))}\n                                </div>\n                            )}\n                            {item.meanings.map((meaning, index) => (\n                                <div key={index} className=\"part-of-speech\">\n                                    <h3>{meaning.partOfSpeech}</h3>\n                                    {meaning.definitions.map((def, index) => (\n                                        <div key={index} className=\"definition\">\n                                            <p>Definition: {def.definition}</p>\n                                            {def.example && <p>Example: {def.example}</p>}\n                                        </div>\n                                    ))}\n                                </div>\n                            ))}\n                        </div>\n                    ))}\n                </div>\n            )}\n\n            <div className=\"actions\">\n                <button onClick={saveWord} disabled={!word || !definition}>Save Word</button>\n            </div>\n            <div className=\"saved-words\">\n                <h2>Saved Words</h2>\n                <ul>\n                    {savedWords.map((item, index) => (\n                        <li key={index}>\n                            <span>{item.word}</span>\n                            <button onClick={() => deleteWord(index)}>Delete</button>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </div>\n    );\n}\n\nexport default Dictionary;\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}